Audio Macros

Warning: The audio subsystem that supports the audio macros comes with some built-in limitations and it is strongly recommended that you familiarize yourself with them.

 
<<audio trackIdList actionList>>
Controls the playback of audio tracks, which must be set up via <<cacheaudio>>.

See: Audio macro limitations.

Note: The <<audio>> macro cannot affect playlist tracks whose ownership has been transferred to their respective playlist. Meaning those set up via <<createplaylist>> with its own action, as owned playlist tracks are solely under the control of their playlist.

Note: The Config.audio.pauseOnFadeToZero setting (default: true) controls whether tracks that have been faded to 0 volume (silent) are automatically paused.

History:
v2.0.0: Introduced.
v2.1.0: Added fadeoverto action.
v2.8.0: Added group ID(s).
v2.28.0: Added load and unload actions.
v2.37.0: Added :stopped predefined group ID.
Arguments:
trackIdList: The list of track and/or group IDs, separated by spaces. See below for details on group IDs.
actionList: The list of actions to perform. Available actions are:
fadein: Start playback of the selected tracks and fade them from their current volume level to 1 (loudest) over 5 seconds.
fadeout: Start playback of the selected tracks and fade them from their current volume level to 0 (silent) over 5 seconds.
fadeoverto seconds level: Start playback of the selected tracks and fade them from their current volume level to the specified level over the specified number of seconds.
fadeto level: Start playback of the selected tracks and fade them from their current volume level to the specified level over 5 seconds.
goto passage: Forwards the player to the passage with the given name when playback of the first of the selected tracks ends normally. May be called either with the passage name or with a link markup.
load: Pause playback of the selected tracks and, if they're not already in the process of loading, force them to drop any existing data and begin loading. NOTE: This should not be done lightly if your audio sources are on the network, as it forces the player to begin downloading them.
loop: Set the selected tracks to repeat playback upon ending normally.
mute: Mute the volume of the selected tracks—effectively volume 0, except without changing the volume level.
pause: Pause playback of the selected tracks.
play: Start playback of the selected tracks.
stop: Stop playback of the selected tracks.
time seconds: Set the current playback time of the selected tracks to the specified number of seconds. Valid values are floating-point numbers in the range 0 (start) to the maximum duration—e.g., 60 is 60 is sixty seconds in, 90.5 is ninety-point-five seconds in.
unload: Stop playback of the selected tracks and force them to drop any existing data. NOTE: Once unloaded, playback cannot occur until a load action is issued.
unloop: Set the selected tracks to not repeat playback (this is the default).
unmute: Unmute the volume of the selected tracks (this is the default).
volume level: Set the volume of the selected tracks to the specified level. Valid values are floating-point numbers in the range 0 (silent) to 1 (loudest)—e.g., 0 is 0%, 0.5 is 50%, 1 is 100%.
Group IDs:
Group IDs allow several tracks to be selected simultaneously without needing to specify each one individually. There are several predefined group IDs (:all, :looped, :muted, :paused, :playing, :stopped) and custom IDs may be defined via <<createaudiogroup>>. The :not() group modifier syntax (groupId:not(trackIdList)) allows a group to have some of its tracks excluded from selection.

Examples:
Basic usage with group IDs
→ Start playback of paused tracks
<<audio ":paused" play>>

→ Pause playback of playing tracks
<<audio ":playing" pause>>

→ Stop playback of playing tracks
<<audio ":playing" stop>>

→ Stop playback of all tracks
<<audio ":all" stop>>

→ Stop playback of playing tracks except those in the ":ui" group
<<audio ":playing:not(:ui)" stop>>

→ Change the volume of all tracks except those in the ":ui" group
→ to 40%, without changing the current playback state
<<audio ":all:not(:ui)" volume 0.40>>
Basic usage with track IDs
→ Given the following (best done in the StoryInit special passage)
<<cacheaudio "bgm_space" "media/audio/space_quest.mp3" "media/audio/space_quest.ogg">>

→ Start playback
<<audio "bgm_space" play>>

→ Start playback at 50% volume
<<audio "bgm_space" volume 0.5 play>>

→ Start playback at 120 seconds in
<<audio "bgm_space" time 120 play>>

→ Start repeating playback
<<audio "bgm_space" loop play>>

→ Start playback and fade from 0% to 100% volume
<<audio "bgm_space" volume 0 fadein>>

→ Start playback and fade from 75% to 0% volume
<<audio "bgm_space" volume 0.75 fadeout>>

→ Start playback and fade from 25% to 75% volume
<<audio "bgm_space" volume 0.25 fadeto 0.75>>

→ Start playback and fade from 25% to 75% volume over 30 seconds
<<audio "bgm_space" volume 0.25 fadeoverto 30 0.75>>

→ Start playback and goto the "Peace Moon" passage upon ending normally
<<audio "bgm_space" play goto "Peace Moon">>

→ Pause playback
<<audio "bgm_space" pause>>

→ Stop playback
<<audio "bgm_space" stop>>

→ Mute playback, without changing the current playback state
<<audio "bgm_space" mute>>

→ Unmute playback, without changing the current playback state
<<audio "bgm_space" unmute>>

→ Change the volume to 40%, without changing the current playback state
<<audio "bgm_space" volume 0.40>>

→ Seek to 90 seconds in, without changing the current playback state
<<audio "bgm_space" time 90>>
Using the load and unload actions
Warning: Be very careful with these if your audio sources are on the network, as you are forcing players to begin downloading them. Not everyone has blazing fast internet with unlimited data—especially true for mobile users. Pease, do not take your players' bandwidth and data usage lightly.

→ If it's not currently loading, drop existing data buffers and load the track
<<audio "bgm_space" load>>

→ Unload the track, dropping existing data buffers
<<audio "bgm_space" unload>>
 
<<cacheaudio trackId sourceList>>
Caches an audio track for use by the other audio macros.

Note: The StoryInit special passage is normally the best place to set up tracks.

History:
v2.0.0: Introduced.
Arguments:
trackId: The ID of the track, which will be used to reference it.
sourceList: A space separated list of sources for the track. Only one is required, though supplying additional sources in differing formats is recommended, as no single format is supported by all browsers. A source must be either a URL (absolute or relative) to an audio resource, the name of an audio passage, or a data URI. In rare cases where the audio format cannot be automatically detected from the source (URLs are parsed for a file extension, data URIs are parsed for the media type), a format specifier may be prepended to the front of each source to manually specify the format (syntax: formatId|, where formatId is the audio format—generally, whatever the file extension would normally be; e.g., mp3, mp4, ogg, weba, wav).
Examples:
→ Cache a track with the ID "boom" and one source via relative URL
<<cacheaudio "boom" "media/audio/explosion.mp3">>

→ Cache a track with the ID "boom" and one source via audio passage
<<cacheaudio "boom" "explosion">>

→ Cache a track with the ID "bgm_space" and two sources via relative URLs
<<cacheaudio "bgm_space" "media/audio/space_quest.mp3" "media/audio/space_quest.ogg">>

→ Cache a track with the ID "what" and one source via URL with a format specifier
<<cacheaudio "what" "mp3|http://an-audio-service.com/a-user/a-track-id">>
 
<<createaudiogroup groupId>>
[<<track trackId>> …]
<</createaudiogroup>>
Collects tracks, which must be set up via <<cacheaudio>>, into a group via its <<track>> children. Groups are useful for applying actions to multiple tracks simultaneously and/or excluding the included tracks from a larger set when applying actions.

Note: The StoryInit special passage is normally the best place to set up groups.

History:
v2.19.0: Introduced.
v2.37.0: Added :stopped predefined group ID.
Arguments:
<<createaudiogroup>>
groupId: The ID of the group that will be used to reference it and must begin with a colon. NOTE: There are several predefined group IDs (:all, :looped, :muted, :paused, :playing, :stopped) and the :not group modifier that cannot be reused/overwritten.
<<track>>
trackId: The ID of the track.
Examples:
→ Given the following (best done in the StoryInit special passage)
<<cacheaudio "ui_beep"  "media/audio/ui/beep.mp3">>
<<cacheaudio "ui_boop"  "media/audio/ui/boop.mp3">>
<<cacheaudio "ui_swish" "media/audio/ui/swish.mp3">>

→ Set up a group ":ui" with the tracks: "ui_beep", "ui_boop", and "ui_swish"
<<createaudiogroup ":ui">>
	<<track "ui_beep">>
	<<track "ui_boop">>
	<<track "ui_swish">>
<</createaudiogroup>>
 
<<createplaylist listId>>
[<<track trackId actionList>> …]
<</createplaylist>>
Collects tracks, which must be set up via <<cacheaudio>>, into a playlist via its <<track>> children.

Note: The StoryInit special passage is normally the best place to set up playlists.

History:
v2.8.0: Introduced.
Arguments:
<<createplaylist>>
listId: The ID of the playlist, which will be used to reference it.
<<track>>
trackId: The ID of the track.
actionList: The list of actions to perform. Available actions are:
volume level: (optional) Set the base volume of the track within the playlist to the specified level. If omitted, defaults to the track's current volume. Valid values are floating-point numbers in the range 0 (silent) to 1 (loudest)—e.g., 0 is 0%, 0.5 is 50%, 1 is 100%.
own: (optional) Keyword, used to signify that the playlist should create its own independent copy of the track, rather than simply referencing the existing version. Owned copies are solely under the control of their playlist—meaning <<audio>> actions cannot affect them, even when using group IDs.
Examples:
→ Given the following setup (best done in the StoryInit special passage)
<<cacheaudio "swamped"       "media/audio/Swamped.mp3">>
<<cacheaudio "heavens_a_lie" "media/audio/Heaven's_A_Lie.mp3">>
<<cacheaudio "closer"        "media/audio/Closer.mp3">>
<<cacheaudio "to_the_edge"   "media/audio/To_The_Edge.mp3">>

→ Create a playlist "bgm_lacuna" with the tracks: "swamped", "heavens_a_lie", "closer", and "to_the_edge"
<<createplaylist "bgm_lacuna">>
	<<track "swamped"       volume 1>>      → Add "swamped" at 100% volume
	<<track "heavens_a_lie" volume 0.5>>    → Add "heavens_a_lie" at 50% volume
	<<track "closer"        own>>           → Add an owned copy of "closer" at its current volume
	<<track "to_the_edge"   volume 1 own>>  → Add an owned copy of "to_the_edge" at 100% volume
<</createplaylist>>
 
<<masteraudio actionList>>
Controls the master audio settings.

See: Audio macro limitations.

History:
v2.8.0: Introduced.
v2.28.0: Added load, muteonhide, nomuteonhide, and unload actions.
Arguments:
actionList: The list of actions to perform. Available actions are:
load: Pause playback of all tracks and, if they're not already in the process of loading, force them to drop any existing data and begin loading. NOTE: This should not be done lightly if your audio sources are on the network, as it forces the player to begin downloading them.
mute: Mute the master volume (effectively volume 0, except without changing the volume level).
muteonhide: Enable automatic muting of the master volume when losing visibility—i.e., when switched to another tab or the browser window is minimized.
nomuteonhide: Disable automatic muting of the master volume when losing visibility (this is the default).
stop: Stop playback of all tracks.
unload: Stop playback of all tracks and force them to drop any existing data. NOTE: Once unloaded, playback cannot occur until a load action is issued for each track—either a master load action, to affect all tracks, or an <<audio>>/<<playlist>> load action, to affect only certain tracks.
unmute: Unmute the master volume (this is the default).
volume level: Set the master volume to the specified level. Valid values are floating-point numbers in the range 0 (silent) to 1 (loudest)—e.g., 0 is 0%, 0.5 is 50%, 1 is 100%.
Examples:
Basic usage
→ Stop playback of all registered tracks, no exceptions
<<masteraudio stop>>

→ Change the master volume to 40%
<<masteraudio volume 0.40>>

→ Mute the master volume
<<masteraudio mute>>

→ Unmute the master volume
<<masteraudio unmute>>

→ Enable automatic muting of the master volume when losing visibility
<<masteraudio muteonhide>>

→ Disable automatic muting of the master volume when losing visibility
<<masteraudio nomuteonhide>>
Using the load and unload actions
Warning: Be very careful with these if your audio sources are on the network, as you are forcing players to begin downloading them. Not everyone has blazing fast internet with unlimited data—especially true for mobile users. Pease, do not take your players' bandwidth and data usage lightly.

→ If they're not currently loading, drop existing data buffers and load all tracks
<<masteraudio load>>

→ Unload all tracks, dropping existing data buffers
<<masteraudio unload>>
 
<<playlist listId actionList>>
Controls the playback of the playlist, which must be set up via <<createplaylist>>.

See: Audio macro limitations.

Note: The Config.audio.pauseOnFadeToZero setting (default: true) controls whether tracks that have been faded to 0 volume (silent) are automatically paused.

History:
v2.0.0: Introduced, compatible with <<setplaylist>>.
v2.1.0: Added fadeoverto action.
v2.8.0: Added listId argument, compatible with <<createplaylist>>.
v2.28.0: Added load and unload actions.
Arguments:
<<createplaylist>>-compatible form
listId: The ID of the playlist.
actionList: The list of actions to perform. Available actions are:
fadein: Start playback of the playlist and fade the current track from its current volume level to 1 (loudest) over 5 seconds.
fadeout: Start playback of the playlist and fade the current track from its current volume level to 0 (silent) over 5 seconds.
fadeoverto seconds level: Start playback of the playlist and fade the current track from its current volume level to the specified level over the specified number of seconds.
fadeto level: Start playback of the playlist and fade the current track from its current volume level to the specified level over 5 seconds.
load: Pause playback of the playlist and, if its tracks are not already in the process of loading, force them to drop any existing data and begin loading. NOTE: This should not be done lightly if your audio sources are on the network, as it forces the player to begin downloading them.
loop: Set the playlist to repeat playback upon ending.
mute: Mute the volume of the playlist (effectively volume 0, except without changing the volume level).
pause: Pause playback of the playlist.
play: Start playback of the playlist.
shuffle: Set the playlist to randomly shuffle.
skip: Skip ahead to the next track in the queue. An empty queue will not be refilled unless repeat playback has been set.
stop: Stop playback of the playlist.
unload: Stop playback of the playlist and force its tracks to drop any existing data. NOTE: Once unloaded, playback cannot occur until a load action is issued.
unloop: Set the playlist to not repeat playback (this is the default).
unmute: Unmute the volume of the playlist (this is the default).
unshuffle: Set the playlist to not randomly shuffle (this is the default).
volume level: Set the volume of the playlist to the specified level. Valid values are floating-point numbers in the range 0 (silent) to 1 (loudest)—e.g., 0 is 0%, 0.5 is 50%, 1 is 100%.
<<setplaylist>>-compatible form
actionList: Identical to the <<createplaylist>>-compatible form.
Examples: (only <<createplaylist>>-compatible form shown)
Basic usage
→ Given the following (best done in the StoryInit special passage)
<<cacheaudio "swamped"       "media/audio/Swamped.mp3">>
<<cacheaudio "heavens_a_lie" "media/audio/Heaven's_A_Lie.mp3">>
<<cacheaudio "closer"        "media/audio/Closer.mp3">>
<<cacheaudio "to_the_edge"   "media/audio/To_The_Edge.mp3">>
<<createplaylist "bgm_lacuna">>
	<<track "swamped"       volume 1>>
	<<track "heavens_a_lie" volume 1>>
	<<track "closer"        volume 1>>
	<<track "to_the_edge"   volume 1>>
<</createplaylist>>

→ Start playback
<<playlist "bgm_lacuna" play>>

→ Start playback at 50% volume
<<playlist "bgm_lacuna" volume 0.5 play>>

→ Start non-repeating playback
<<playlist "bgm_lacuna" unloop play>>

→ Start playback with a randomly shuffled playlist
<<playlist "bgm_lacuna" shuffle play>>

→ Start playback and fade from 0% to 100% volume
<<playlist "bgm_lacuna" volume 0 fadein>>

→ Start playback and fade from 75% to 0% volume
<<playlist "bgm_lacuna" volume 0.75 fadeout>>

→ Start playback and fade from 25% to 75% volume
<<playlist "bgm_lacuna" volume 0.25 fadeto 0.75>>

→ Start playback and fade from 25% to 75% volume over 30 seconds
<<playlist "bgm_lacuna" volume 0.25 fadeoverto 30 0.75>>

→ Pause playback
<<playlist "bgm_lacuna" pause>>

→ Stop playback
<<playlist "bgm_lacuna" stop>>

→ Mute playback, without changing the current playback state
<<playlist "bgm_lacuna" mute>>

→ Unmute playback, without changing the current playback state
<<playlist "bgm_lacuna" unmute>>

→ Change the volume to 40%, without changing the current playback state
<<playlist "bgm_lacuna" volume 0.40>>

→ Set the playlist to randomly shuffle, without changing the current playback state
<<playlist "bgm_lacuna" shuffle>>
Using the load and unload actions
Warning: Be very careful with these if your audio sources are on the network, as you are forcing players to begin downloading them. Not everyone has blazing fast internet with unlimited data—especially true for mobile users. Pease, do not take your players' bandwidth and data usage lightly.

→ If they're not currently loading, drop existing data buffers and load all of the playlist's tracks
<<playlist "bgm_lacuna" load>>

→ Unload all of the playlist's tracks, dropping existing data buffers
<<playlist "bgm_lacuna" unload>>
 
<<removeaudiogroup groupId>>
Removes the audio group with the given ID.

Note: You may not remove the predefined group IDs (:all, :looped, :muted, :paused, :playing, :stopped) or the :not group modifier.

History:
v2.28.0: Introduced.
v2.37.0: Added :stopped predefined group ID.
Arguments:
groupId: The ID of the group.
Examples:
→ Given a group set up via <<createaudiogroup ":ui">>…<</createplaylist>>
<<removeaudiogroup ":ui">>
 
<<removeplaylist listId>>
Removes the playlist with the given ID.

History:
v2.8.0: Introduced.
Arguments:
listId: The ID of the playlist.
Examples:
→ Given a playlist set up via <<createplaylist "bgm_lacuna">>…<</createplaylist>>
<<removeplaylist "bgm_lacuna">>